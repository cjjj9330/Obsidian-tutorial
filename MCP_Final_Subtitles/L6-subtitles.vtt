﻿WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:127826

1
00:00:01.918 --> 00:00:05.588
In the previous lesson, you
connected your chatbot to one server that

2
00:00:05.588 --> 00:00:06.506
you built.

3
00:00:06.506 --> 00:00:10.343
Now you'll update your chatbot
so that it can connect to any server.

4
00:00:10.802 --> 00:00:14.222
You'll learn more about the reference
servers developed by the Anthropic team

5
00:00:14.431 --> 00:00:16.349
and how you can download them.

6
00:00:16.349 --> 00:00:17.559
Let's get to it!

7
00:00:17.559 --> 00:00:20.562
So far,
we've seen how to build MCP servers

8
00:00:20.687 --> 00:00:24.649
as well as clients and connect
those on a 1 to 1 basis.

9
00:00:24.816 --> 00:00:29.154
Well, we want to start introducing
now, is the ability to not only build

10
00:00:29.154 --> 00:00:33.616
multiple clients that can work
with multiple servers, but also introduce

11
00:00:33.616 --> 00:00:37.287
the entire ecosystem of servers
that exist out there.

12
00:00:37.537 --> 00:00:40.540
So I'm going to start here
by taking a look at some of the servers

13
00:00:40.832 --> 00:00:44.252
that are reference servers
from Anthropic on our repository.

14
00:00:44.377 --> 00:00:48.089
So let's go take a look on GitHub
for the reference servers that we have

15
00:00:48.923 --> 00:00:50.550
with the Model Context Protocol.

16
00:00:50.550 --> 00:00:53.261
As you take a look
through all of the servers here,

17
00:00:53.261 --> 00:00:55.472
there's a massive, massive list.

18
00:00:55.472 --> 00:00:57.766
So we're just going to start
with the reference servers.

19
00:00:57.766 --> 00:01:00.769
These are ones that we have worked on
and built at Anthropic.

20
00:01:01.227 --> 00:01:05.106
There are also many different third
party servers and official integrations.

21
00:01:05.732 --> 00:01:08.693
Any data source that you can imagine
talking to at this point

22
00:01:08.818 --> 00:01:11.154
probably has an MCP server.

23
00:01:11.154 --> 00:01:14.532
Instead of you having to download
these servers and run them locally.

24
00:01:14.699 --> 00:01:19.162
We're also going to see how we can add
the command necessary to run the server

25
00:01:19.287 --> 00:01:20.789
without that much hassle.

26
00:01:20.789 --> 00:01:22.373
The servers that we're going to be using

27
00:01:22.373 --> 00:01:25.376
are the fetch server,
as well as the file system server.

28
00:01:25.418 --> 00:01:27.796
So let's take a look at the fetch server.

29
00:01:27.796 --> 00:01:30.590
What's so interesting about this
is that if you look

30
00:01:30.590 --> 00:01:34.469
at the underlying source code
for many of these servers, it's

31
00:01:34.469 --> 00:01:37.639
actually going to look pretty familiar
to what you built before.

32
00:01:37.889 --> 00:01:41.726
We can see here
that the fetch MCP server exposes tools

33
00:01:41.726 --> 00:01:45.146
and a prompt to us, and we can see
what the installation is as well.

34
00:01:45.271 --> 00:01:50.271
Since this server is written in Python,
we're actually going to use the uv command

35
00:01:51.111 --> 00:01:56.074
to directly run a command called MCP
server fetch, which will run all the code

36
00:01:56.074 --> 00:02:00.036
necessary to download what we need
and establish the connection.

37
00:02:00.078 --> 00:02:03.081
So instead of uv run,
we're going to be using uvx.

38
00:02:03.248 --> 00:02:06.793
The fetch server allows us to retrieve
content from web pages,

39
00:02:06.960 --> 00:02:11.960
convert HTML to markdown so
that LLMs can better consume that content.

40
00:02:12.298 --> 00:02:15.593
The second server that we're going to be
looking at is the file system server.

41
00:02:15.718 --> 00:02:17.512
And just like you can imagine,

42
00:02:17.512 --> 00:02:20.974
this is going to be a way
for us to access our file system reading,

43
00:02:20.974 --> 00:02:25.228
writing files, searching for files,
getting metadata and so on.

44
00:02:25.395 --> 00:02:28.565
We can see here
there are resources and tools exposed,

45
00:02:28.815 --> 00:02:31.818
quite a few different tools
for reading and writing files.

46
00:02:32.110 --> 00:02:34.070
If you take a look at the source code
here,

47
00:02:34.070 --> 00:02:36.739
you can see that
this is not written in Python.

48
00:02:36.739 --> 00:02:40.118
This is in fact written in TypeScript,
which means instead of uvx,

49
00:02:40.451 --> 00:02:42.954
we're going to be using
a slightly different command.

50
00:02:42.954 --> 00:02:45.999
If we take a look at the installation
instructions to run this,

51
00:02:46.166 --> 00:02:49.878
the command necessary is npx /y.

52
00:02:50.336 --> 00:02:54.007
So that we don't need to press enter
for any other installation instructions

53
00:02:54.340 --> 00:02:57.719
and then Model Context Protocol server
file system.

54
00:02:57.719 --> 00:02:58.386
So similar

55
00:02:58.386 --> 00:03:02.307
to running uvx where we can download
what we need and execute it right away,

56
00:03:02.515 --> 00:03:06.436
we're going to be using npx
from the npm package manager.

57
00:03:06.603 --> 00:03:11.482
We then specify any paths that we allow
for reading and writing files into.

58
00:03:11.941 --> 00:03:12.692
As you can see,

59
00:03:12.692 --> 00:03:16.237
each of these reference servers
have a bit of configuration required.

60
00:03:16.404 --> 00:03:19.490
The name of the server,
the command necessary, and so on.

61
00:03:19.616 --> 00:03:23.494
So what we're going to do is we're going
to make some updates to our chatbot.

62
00:03:23.703 --> 00:03:26.539
Instead of hardcoding
these server parameters.

63
00:03:26.539 --> 00:03:30.043
We're going to make a small JSON file
that we can read from

64
00:03:30.418 --> 00:03:34.589
to figure out the necessary commands
to interact with our servers.

65
00:03:34.589 --> 00:03:37.133
We'll be using the file system server,

66
00:03:37.133 --> 00:03:40.762
the research server that we're building,
as well as the fetch server.

67
00:03:40.803 --> 00:03:43.765
And we'll see how
we can put all three of those together

68
00:03:43.890 --> 00:03:47.518
to create very powerful prompts.
In order to make this happen,

69
00:03:47.644 --> 00:03:51.231
we're going to have to go ahead
and change the code in our MCP chatbot.

70
00:03:51.564 --> 00:03:54.150
The reference servers stay the same.

71
00:03:54.150 --> 00:03:56.277
Our research server stays the same,

72
00:03:56.277 --> 00:03:59.280
but we have to update the code
a bit for our MCP chatbot.

73
00:03:59.572 --> 00:04:00.865
There is a good amount here

74
00:04:00.865 --> 00:04:05.203
that is relatively lower level
and plenty of opportunity for refactoring.

75
00:04:05.203 --> 00:04:07.288
So I'll walk you through what we have here

76
00:04:07.288 --> 00:04:11.042
and I welcome any changes you'd like
to make to grow this as it scales.

77
00:04:11.417 --> 00:04:15.088
In order to get this to work,
we're going to have to set up our own JSON

78
00:04:15.088 --> 00:04:19.842
file to configure how we want to connect
to each of the individual servers.

79
00:04:20.009 --> 00:04:21.844
And here's what that's going to look like.

80
00:04:21.844 --> 00:04:25.390
We're going to start with a little bit
of JSON to contain all of our servers.

81
00:04:25.556 --> 00:04:28.559
Then we'll specify
the name of those servers

82
00:04:28.685 --> 00:04:31.688
as well as the underlying
command necessary.

83
00:04:31.813 --> 00:04:35.191
And any arguments
required for the research server.

84
00:04:35.191 --> 00:04:37.235
This is going to look relatively familiar.

85
00:04:37.235 --> 00:04:38.611
And for the reference servers,

86
00:04:38.611 --> 00:04:42.156
since we're not downloading it
and then running it locally ourselves,

87
00:04:42.365 --> 00:04:46.828
we're using commands
like npx and uvx to run those immediately.

88
00:04:46.995 --> 00:04:48.371
So we're going to see this file.

89
00:04:48.371 --> 00:04:52.250
And you can find this file as well
in your list of files for this lesson

90
00:04:52.625 --> 00:04:56.671
under the folder MCP project.
For the File System server,

91
00:04:56.671 --> 00:05:01.467
if you remember, we had to specify
the paths that we wanted access to.

92
00:05:01.467 --> 00:05:05.513
And here we're specifying a dot which
means the current directory that we're in.

93
00:05:05.513 --> 00:05:07.557
So this is not going to be able to read

94
00:05:07.557 --> 00:05:11.311
or write from files or folders
outside of this current directory.

95
00:05:11.728 --> 00:05:16.024
Now let's go ahead and take a look
at the code necessary for our MCP chatbot

96
00:05:16.274 --> 00:05:20.903
to not only connect to multiple servers
with multiple clients,

97
00:05:21.112 --> 00:05:26.112
but also correctly read the JSON file
for the server configuration necessary.

98
00:05:26.367 --> 00:05:27.285
Let's go ahead and see what

99
00:05:27.285 --> 00:05:31.122
we need to update our MCP
chatbot to handle these connections.

100
00:05:31.497 --> 00:05:34.917
If you take a look at the code
that we have here for our MCP chatbot,

101
00:05:35.376 --> 00:05:39.088
there's quite a bit more happening
under the hood, and especially some lower

102
00:05:39.088 --> 00:05:42.175
level ideas that I want you
to not feel too intimidated by.

103
00:05:42.383 --> 00:05:47.180
The most important takeaway
here is to understand how tools like Claude

104
00:05:47.180 --> 00:05:51.642
Desktop, Claude AI, Cursor,
Windsurf, work under the hood

105
00:05:51.934 --> 00:05:55.063
when they set up multiple connections
to multiple servers.

106
00:05:55.563 --> 00:05:58.858
What I'm going to do here is start
by adding a little bit more to my MCP

107
00:05:58.858 --> 00:05:59.442
chatbot.

108
00:05:59.442 --> 00:06:00.902
I'm going to maintain a list

109
00:06:00.902 --> 00:06:04.864
of all of the sessions that I've connected
to, as well as all of the tools

110
00:06:04.864 --> 00:06:08.201
and the particular session
that that tool is related to.

111
00:06:08.534 --> 00:06:10.328
Again, this is not production ready.

112
00:06:10.328 --> 00:06:13.164
This is really just giving you
a sense of how to get started.

113
00:06:13.164 --> 00:06:16.167
And the focus here is to make sure
that we correctly map a tool

114
00:06:16.167 --> 00:06:18.086
to the session that we're working in.

115
00:06:18.086 --> 00:06:19.045
We have a type definition

116
00:06:19.045 --> 00:06:22.548
here, as our tools are a little bit
more complex than we had before.

117
00:06:22.924 --> 00:06:26.094
We're going to have some similar code
to connect to a server, except that

118
00:06:26.094 --> 00:06:31.094
since we have multiple context managers
inside of an asynchronous environment,

119
00:06:31.474 --> 00:06:34.352
we have to set up our connection
a little bit differently.

120
00:06:34.352 --> 00:06:39.352
So we use an async exit stack to manage
our connections for reading and writing,

121
00:06:39.732 --> 00:06:42.735
as well as managing the entire connection
to the session.

122
00:06:43.111 --> 00:06:46.030
Below, we're going to see
some pretty familiar code.

123
00:06:46.030 --> 00:06:49.033
We initialize a session,
we list those tools,

124
00:06:49.450 --> 00:06:52.787
and we take the tools and append them
to our list of available tools.

125
00:06:53.162 --> 00:06:56.124
You can imagine that this is a function
that's going to be run

126
00:06:56.124 --> 00:07:00.086
multiple times for each of the servers
that we want to connect to.

127
00:07:00.211 --> 00:07:02.672
And that is exactly what we're doing down
here.

128
00:07:02.672 --> 00:07:05.675
We're going to go ahead
and read from our server config file.

129
00:07:05.675 --> 00:07:07.176
We're going to parse that JSON,

130
00:07:07.176 --> 00:07:10.888
turn it into a dictionary that we can
then iterate over.

131
00:07:10.888 --> 00:07:14.517
And for each individual MCP
server, connect to it.

132
00:07:14.851 --> 00:07:17.520
If you are familiar
with asynchronous programing

133
00:07:17.520 --> 00:07:19.522
you can see that this code is blocking,

134
00:07:19.522 --> 00:07:23.317
and maybe you could refactor this
to use async IO gather or so on.

135
00:07:23.609 --> 00:07:27.321
But again, the focus here is understanding
conceptually what's going on

136
00:07:27.780 --> 00:07:29.907
and welcome any refactor
as you'd like to do.

137
00:07:29.907 --> 00:07:33.494
Once we connect to all of these servers,
we're then going to use some logic

138
00:07:33.494 --> 00:07:35.163
that looks pretty familiar as well.

139
00:07:35.163 --> 00:07:38.166
We're going to go ahead
and get access to our model.

140
00:07:38.374 --> 00:07:41.335
We're going to pass in any information
coming in from a query.

141
00:07:41.878 --> 00:07:43.087
And then if there is a tool

142
00:07:43.087 --> 00:07:46.757
that we need, we're going to go find it
and call that particular tool.

143
00:07:47.216 --> 00:07:50.011
The rest of this logic is very familiar.

144
00:07:50.011 --> 00:07:54.140
The chat loop that we have is exactly
as what we had before, with one small note,

145
00:07:54.557 --> 00:07:58.144
that when we need to go ahead and close
any connection that we have.

146
00:07:58.311 --> 00:08:02.899
We do this using our context manager
for multiple different connections.

147
00:08:03.483 --> 00:08:06.527
Our main function has a little bit
more to allow us to connect

148
00:08:06.527 --> 00:08:10.031
to all of the servers that we need,
and then start the chat loop.

149
00:08:10.156 --> 00:08:11.782
And once that's all done,

150
00:08:11.782 --> 00:08:15.077
we can go ahead and clean up
any lingering connections that we have

151
00:08:15.119 --> 00:08:16.162
to these servers.

152
00:08:16.162 --> 00:08:19.081
And just like we had before,
we're going to start this application

153
00:08:19.081 --> 00:08:22.084
by calling Async io dot run
with our main function.

154
00:08:22.168 --> 00:08:24.420
So let's go ahead and write this file

155
00:08:24.420 --> 00:08:27.173
and we'll hop back to the terminal
in the terminal here.

156
00:08:27.173 --> 00:08:30.092
I'm going to first CD into MCP project.

157
00:08:30.092 --> 00:08:33.262
And I'm going to see here
that I have again a dot then folder.

158
00:08:33.429 --> 00:08:36.390
So let's go ahead and activate
that virtual environment.

159
00:08:36.390 --> 00:08:38.726
Source dot venv bin activate.

160
00:08:39.769 --> 00:08:42.438
And then
let's go ahead and run our chatbot.

161
00:08:42.438 --> 00:08:44.524
I'll clear
so we can take this from the top.

162
00:08:44.524 --> 00:08:45.066
And I'll type in.

163
00:08:45.066 --> 00:08:48.069
You've run MCP

164
00:08:48.110 --> 00:08:51.113
chatbot dot py.

165
00:08:52.198 --> 00:08:53.741
What we're going to do here

166
00:08:53.741 --> 00:08:58.329
is connect to multiple MCP servers
by setting up multiple clients.

167
00:08:58.955 --> 00:09:01.832
We can see here,
we've connected to the file system

168
00:09:01.832 --> 00:09:04.794
with the allowed directory
of the current directory we're in.

169
00:09:04.919 --> 00:09:07.630
We've connected with these particular
set of tools.

170
00:09:07.630 --> 00:09:11.759
We've connected to our research server
as well as the fetch server itself.

171
00:09:12.093 --> 00:09:15.096
We have the same exact chat interface
that we had before.

172
00:09:15.096 --> 00:09:16.764
So I'm going to paste in this prompt

173
00:09:16.764 --> 00:09:20.351
where I'm going to ask it to fetch
the content of the Model Context Protocol

174
00:09:20.560 --> 00:09:23.479
and save the content
to a file called MCP summary,

175
00:09:23.479 --> 00:09:27.275
and then create a visual diagram
that summarizes the content.

176
00:09:27.316 --> 00:09:28.859
So what we're going to be doing here

177
00:09:28.859 --> 00:09:31.862
is use a multitude of tools
to fetch information

178
00:09:31.988 --> 00:09:34.198
and then to summarize that information.

179
00:09:34.198 --> 00:09:36.993
We're then going to have it
draw a nice little diagram for us.

180
00:09:36.993 --> 00:09:39.412
So let's
go take a look at what that looks like.

181
00:09:39.412 --> 00:09:43.332
We can see here it's saved to a file
called MCP summary MD.

182
00:09:43.916 --> 00:09:47.461
So in our file system let's go take a look
at what that file looks like.

183
00:09:47.878 --> 00:09:51.465
So we've got this nice little diagram here
for the Model Context Protocol.

184
00:09:51.799 --> 00:09:55.219
This was done by fetching information
from the website summarizing

185
00:09:55.219 --> 00:09:56.554
that information.

186
00:09:56.554 --> 00:09:58.889
Turning it into a nice visualization.

187
00:09:58.889 --> 00:10:01.017
And again
we're going to see an even prettier one

188
00:10:01.017 --> 00:10:03.436
when we start bringing in tools
like Claude Desktop.

189
00:10:03.436 --> 00:10:06.439
But now the UI is totally up to you
for what you want to do.

190
00:10:06.981 --> 00:10:09.984
But you can do whatever you want
with this file right now.

191
00:10:10.026 --> 00:10:13.029
So we've seen how a couple of these
servers can work together.

192
00:10:13.279 --> 00:10:15.531
Let's try bringing all three together.

193
00:10:15.531 --> 00:10:18.534
So we'll say fetch DeepLearning.AI

194
00:10:18.993 --> 00:10:21.579
find an interesting term

195
00:10:22.872 --> 00:10:25.875
to search papers around

196
00:10:26.250 --> 00:10:29.253
and then summarize your findings

197
00:10:29.545 --> 00:10:32.214
and write them to a file

198
00:10:32.214 --> 00:10:35.217
called results dot txt.

199
00:10:35.926 --> 00:10:39.388
We're going to make use of the fetch tool
here to visit a website

200
00:10:40.264 --> 00:10:43.017
and find the content of that website.

201
00:10:43.017 --> 00:10:46.020
Based on that content,
we'll find some interesting terms.

202
00:10:46.646 --> 00:10:49.649
In this case
we've got multi-concept pre-training.

203
00:10:50.107 --> 00:10:52.652
We're then going to go ahead
and find papers related to

204
00:10:52.652 --> 00:10:55.655
that.

205
00:11:01.494 --> 00:11:04.497
We're going to take that data
and we're going to write it to a file.

206
00:11:05.247 --> 00:11:08.626
You might not find yourself
using a combination of these servers

207
00:11:08.626 --> 00:11:12.630
for many real-world use cases,
but now your imagination can carry you.

208
00:11:13.422 --> 00:11:15.675
Any existing MCP server

209
00:11:15.675 --> 00:11:18.511
can be added with minimal configuration,

210
00:11:18.511 --> 00:11:22.348
and you can take the results
of these different MCP servers to add

211
00:11:22.348 --> 00:11:26.936
all the context you need to connect
models like Claude to the outside world.

212
00:11:28.437 --> 00:11:31.232
We can see here we've got a really nice
summary.

213
00:11:31.232 --> 00:11:33.526
Let's
go ahead and see what's been written here.

214
00:11:33.526 --> 00:11:35.820
So we got a very interesting result
from our research.

215
00:11:35.820 --> 00:11:40.533
It seems that while MCP or Model Context
Protocol is a very powerful tool,

216
00:11:40.533 --> 00:11:44.328
there also is another acronym
for MCP for Multi Concept pre-training.

217
00:11:44.578 --> 00:11:47.081
So it looks like the model
got a little bit confused here.

218
00:11:47.081 --> 00:11:49.917
When in doubt, this is why
prompt engineering is so important.

219
00:11:49.917 --> 00:11:52.294
And we could even follow up
with a follow of

220
00:11:52.294 --> 00:11:56.215
this is why you should include the Model
Context Protocol and not other concepts

221
00:11:56.215 --> 00:11:56.799
as well.

222
00:11:56.799 --> 00:11:59.802
As always, if we want to leave this chat
session, we can type in quit.

223
00:12:00.302 --> 00:12:03.723
Now that we have multiple servers
connecting to multiple clients,

224
00:12:04.181 --> 00:12:07.560
let's start adding on a few other
primitives like resources

225
00:12:07.810 --> 00:12:09.270
for read only data

226
00:12:09.270 --> 00:12:13.107
and prompt templates for the ability
to generate prompts on the server

227
00:12:13.524 --> 00:12:15.025
that the user can use

228
00:12:15.025 --> 00:12:18.028
so that they don't have to write prompts
completely from scratch.

229
00:12:18.154 --> 00:12:19.113
I'll see you in the next lesson.


