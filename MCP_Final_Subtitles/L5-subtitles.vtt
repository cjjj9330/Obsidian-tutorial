﻿WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:127826

1
00:00:01.918 --> 00:00:03.712
With your MCP server ready,

2
00:00:03.712 --> 00:00:07.465
it's now time to create an MCP client
inside your chatbot.

3
00:00:07.716 --> 00:00:11.428
To let the chatbot communicate with
the server and get access to the tool

4
00:00:11.428 --> 00:00:13.346
definitions and results.

5
00:00:13.346 --> 00:00:14.431
Let's have some fun!

6
00:00:14.431 --> 00:00:17.559
Now that we've seen how to build a server
with MCP,

7
00:00:18.059 --> 00:00:22.564
let's go ahead and move past the inspector
and build our own host

8
00:00:22.897 --> 00:00:26.192
to contain a client
to talk to our MCP server.

9
00:00:26.317 --> 00:00:30.030
We're going to be working with the chatbot
directly, but if you want to take

10
00:00:30.030 --> 00:00:34.784
a look at other files like the server that
we've made before, feel free to do so.

11
00:00:35.118 --> 00:00:38.955
We're going to start by revisiting what
we saw before in our chatbot example.

12
00:00:39.122 --> 00:00:39.497
You're going to

13
00:00:39.497 --> 00:00:43.168
see a lot of this code again, but
we're going to layer on a little bit more

14
00:00:43.376 --> 00:00:45.545
as we start
bringing a client into the mix.

15
00:00:45.545 --> 00:00:48.256
Everything you're seeing here
we've seen before.

16
00:00:48.256 --> 00:00:51.092
This is simply
the ability to process a query

17
00:00:51.092 --> 00:00:54.929
using Claude 3.7 Sonnet,
as well as tool use.

18
00:00:55.430 --> 00:00:58.808
We can see here that we're not actually
defining any tools.

19
00:00:58.808 --> 00:01:02.645
That's all being done in the server
that we made in the last lesson.

20
00:01:03.104 --> 00:01:06.274
Let's go ahead now
and start talking about how to bring in

21
00:01:06.566 --> 00:01:08.610
and create an MCP client.

22
00:01:08.610 --> 00:01:13.490
I'm going to bring in a bit of code
from the underlying MCP library,

23
00:01:13.823 --> 00:01:16.743
because I want to talk through
what's actually happening here.

24
00:01:16.743 --> 00:01:21.743
If you remember, when we create an MCP
client, which lives inside of a host,

25
00:01:22.207 --> 00:01:27.207
we need to make sure that that client
establishes a connection to an MCP server.

26
00:01:28.046 --> 00:01:29.798
An important note here,

27
00:01:29.798 --> 00:01:32.801
the code that we're looking at
is slightly lower level.

28
00:01:33.009 --> 00:01:34.552
You won't always find yourself

29
00:01:34.552 --> 00:01:37.555
building clients from scratch,
but it's really important

30
00:01:37.555 --> 00:01:41.392
that when you see other tools
like Claude desktop or Claude AI,

31
00:01:41.726 --> 00:01:44.437
you have an idea of what's happening
under the hood.

32
00:01:44.437 --> 00:01:47.982
So if this code looks relatively
intimidating, don't be too worried.

33
00:01:48.024 --> 00:01:49.651
We'll go step by step.

34
00:01:49.651 --> 00:01:54.030
The goal here is really to make sure
you understand how clients are created

35
00:01:54.030 --> 00:01:56.991
and how they establish connections
to servers.

36
00:01:56.991 --> 00:02:01.871
What we're seeing here are a few imports
from the underlying MCP library,

37
00:02:02.163 --> 00:02:07.163
to bring in the necessary classes,
to establish a connection to a server,

38
00:02:07.377 --> 00:02:11.548
as well as the ability
to start a subprocess from the client.

39
00:02:11.631 --> 00:02:14.926
So the first thing we're going to do here
is establish the server

40
00:02:15.135 --> 00:02:18.138
and the parameters necessary
that we want to connect to.

41
00:02:18.179 --> 00:02:22.058
And this is actually going to look pretty
familiar. That scene command that we ran,

42
00:02:22.100 --> 00:02:25.061
uv run Research Server dot py.

43
00:02:25.061 --> 00:02:30.061
We're specifying here to let
our client know how to start the server.

44
00:02:30.358 --> 00:02:34.779
If there are any environment variables
that we need, we can pass those in here.

45
00:02:35.238 --> 00:02:38.366
The next step is to actually establish
that connection

46
00:02:38.533 --> 00:02:41.536
and launch the server as a subprocess.

47
00:02:41.536 --> 00:02:44.914
Since we might not want this
to be blocking, we're going to be making

48
00:02:44.914 --> 00:02:47.959
use of async
and await quite a bit in Python.

49
00:02:48.084 --> 00:02:49.836
If you're not too familiar with that,

50
00:02:49.836 --> 00:02:52.797
no worries, I'll walk you through
what needs to be done here.

51
00:02:52.797 --> 00:02:55.675
We're going to define a function
called run, and we're going to set up

52
00:02:55.675 --> 00:03:00.096
a context manager
to first pass in the parameters

53
00:03:00.096 --> 00:03:04.350
from our server and establish a connection
as a subprocess.

54
00:03:04.684 --> 00:03:07.645
Once we've established the server
to connect to,

55
00:03:07.979 --> 00:03:10.982
we're going to get access
to a read and write stream

56
00:03:11.149 --> 00:03:16.149
that we can then pass to a higher level
class called the client session.

57
00:03:16.196 --> 00:03:19.866
In this client session,
when we pass the read and write stream,

58
00:03:20.325 --> 00:03:23.244
we'll get access
to an underlying connection

59
00:03:23.244 --> 00:03:26.372
that allows us
to make use of functionality

60
00:03:26.372 --> 00:03:29.542
for listing tools,
initializing connections,

61
00:03:29.792 --> 00:03:32.378
and doing quite a bit
more with other primitives.

62
00:03:32.378 --> 00:03:33.838
The first thing we're going to do

63
00:03:33.838 --> 00:03:37.133
is establish that handshake
and initialize our session.

64
00:03:37.383 --> 00:03:41.012
Well, then go ahead and list
all of the available tools

65
00:03:41.221 --> 00:03:43.056
that the server is providing.

66
00:03:43.056 --> 00:03:46.309
Remember,
the client's job is to query for tools

67
00:03:46.559 --> 00:03:49.854
and take those tools
and pass them to a large language model.

68
00:03:50.271 --> 00:03:53.608
We'll make use of our chat loop
functionality that we saw before.

69
00:03:53.733 --> 00:03:56.694
And if there is a tool
that needs to be invoked,

70
00:03:56.945 --> 00:04:00.573
we'll go ahead and let the MCP server
do that work.

71
00:04:00.949 --> 00:04:03.576
So we're going to see a slightly different
bit of code

72
00:04:03.576 --> 00:04:06.079
for executing the underlying tool.

73
00:04:06.079 --> 00:04:09.082
We're going to bring in the tools
from the MCP server.

74
00:04:09.540 --> 00:04:12.210
And if a tool needs to be executed,

75
00:04:12.210 --> 00:04:15.213
we'll let the MCP server know what to do.

76
00:04:15.546 --> 00:04:18.007
And we've defined all the code necessary

77
00:04:18.007 --> 00:04:21.719
in the previous lesson for what happens
when that tool is executed.

78
00:04:22.178 --> 00:04:25.014
Since we're working
in an async environment,

79
00:04:25.014 --> 00:04:29.394
we're going to be moving
past MCP dot run and using async IO dot run.

80
00:04:30.186 --> 00:04:32.772
So with that in mind,
let's put this all together.

81
00:04:32.772 --> 00:04:36.985
We're going to go ahead
and add our MCP client to our chatbot.

82
00:04:37.735 --> 00:04:41.990
We're going to go ahead and write a file
called MCP chatbot dot py.

83
00:04:42.573 --> 00:04:45.326
Since this is what we're going to run
in the terminal

84
00:04:45.326 --> 00:04:49.872
to start interacting with our chatbot,
we're going to bring in all of the imports

85
00:04:49.872 --> 00:04:54.872
that you saw before alongside nest
async IO, which is necessary for different

86
00:04:55.503 --> 00:04:59.382
operating systems to work properly
with the event loop in Python.

87
00:04:59.590 --> 00:05:02.427
We're going to bring in any environment
variables that we have

88
00:05:02.427 --> 00:05:03.970
and then initialize our chatbot.

89
00:05:03.970 --> 00:05:07.682
When we initialize our chatbot,
we don't have a current session

90
00:05:08.224 --> 00:05:11.185
and we don't have any tools available
to us.

91
00:05:11.185 --> 00:05:13.563
We're going to see that
once we start establishing

92
00:05:13.563 --> 00:05:16.524
the connection, these values will change.

93
00:05:16.524 --> 00:05:19.527
Our process
query looks very similar to above

94
00:05:19.652 --> 00:05:24.240
with a slight difference of what happens
when the tool needs to be invoked.

95
00:05:24.615 --> 00:05:27.744
We're using the session established
to go back

96
00:05:27.744 --> 00:05:30.913
to the MCP server
and execute the tool necessary.

97
00:05:31.205 --> 00:05:34.459
We're then going to follow similar logic
for appending a message

98
00:05:34.459 --> 00:05:37.462
and making use of tool use
that we've seen before.

99
00:05:37.503 --> 00:05:40.465
Our chat loop as well
is going to look very similar.

100
00:05:40.465 --> 00:05:43.676
We're going to go ahead and keep running
until someone types in quit

101
00:05:44.344 --> 00:05:48.222
and process that particular query
whenever data comes in.

102
00:05:48.681 --> 00:05:51.976
To wrap this up, we're going to define
a function called connect

103
00:05:51.976 --> 00:05:56.147
to Server and Run,
which does just that. Like we saw before,

104
00:05:56.522 --> 00:05:59.484
we establish a connection to an MCP server.

105
00:05:59.609 --> 00:06:03.988
We get access to the read and write stream
and the underlying session

106
00:06:04.113 --> 00:06:07.950
so that we can establish that connection,
list the tools that we need,

107
00:06:08.451 --> 00:06:13.289
and then take those tools
and pass them for tool use in the model.

108
00:06:13.706 --> 00:06:16.167
To wrap this up,
we initialize our chatbot

109
00:06:16.167 --> 00:06:19.128
and we call our connect to server and run
function.

110
00:06:19.128 --> 00:06:22.131
Inside of a __name__
equals __mean__

111
00:06:22.131 --> 00:06:25.134
We run our main function using async IO.

112
00:06:25.468 --> 00:06:30.468
So let's go ahead and run this code to
create the necessary MCP chatbot.py file.

113
00:06:31.265 --> 00:06:32.934
So let's
go ahead and bring in our terminal.

114
00:06:34.894 --> 00:06:37.563
And we'll
see here I'm in the L5 directory.

115
00:06:37.563 --> 00:06:40.525
I'm going to CD into the MCP
project folder.

116
00:06:42.860 --> 00:06:45.822
And if we take a look at what I have
right here,

117
00:06:45.822 --> 00:06:48.825
I have a virtual environment
that already exists.

118
00:06:49.075 --> 00:06:52.995
So I'm going to go ahead and start
by activating

119
00:06:52.995 --> 00:06:56.707
that virtual environment. Source dot
venv bin activate.

120
00:06:56.958 --> 00:07:00.461
We're also going to need a couple other
dependencies to make this project work.

121
00:07:00.628 --> 00:07:05.628
So I'll go ahead clear this
and I'll add the Anthropic SDK,

122
00:07:06.134 --> 00:07:08.803
the python-dotenv module

123
00:07:08.803 --> 00:07:12.306
for environment
variable access and nest async IO.

124
00:07:12.473 --> 00:07:15.977
Once I add those dependencies,
I should have everything necessary

125
00:07:16.310 --> 00:07:19.063
to start my chatbot.
Before I start the chatbot

126
00:07:19.063 --> 00:07:21.691
let's just make sure we see
how this is coming together.

127
00:07:21.691 --> 00:07:25.611
When I type in
uv run MCP chatbot dot py.

128
00:07:25.736 --> 00:07:29.157
We are going to connect to our MCP server,

129
00:07:29.532 --> 00:07:33.870
make use of the tools that are defined,
past those tools to Claude,

130
00:07:34.203 --> 00:07:37.915
and then create a nice interface
for us to start talking with Claude,

131
00:07:38.082 --> 00:07:42.003
to get access to those tools
and any other data that we want.

132
00:07:42.420 --> 00:07:45.131
We can see here
that when there is a connection,

133
00:07:45.131 --> 00:07:48.176
we're processing
that request of list tools request.

134
00:07:48.509 --> 00:07:51.596
This is the underlying functionality
in the protocol

135
00:07:51.846 --> 00:07:54.724
that allows me to pull in the tools
necessary.

136
00:07:54.724 --> 00:07:56.100
We've connected to the server

137
00:07:56.100 --> 00:07:59.562
with the following tools
and we can start talking to our chatbot.

138
00:07:59.854 --> 00:08:01.439
We can always start with something simple.

139
00:08:01.439 --> 00:08:03.149
Just make sure things are working.

140
00:08:03.149 --> 00:08:05.485
A friendly query to greet our chatbot.

141
00:08:05.485 --> 00:08:09.071
Now let's go ahead and make use
of some of those tools that we have.

142
00:08:09.655 --> 00:08:14.655
So I'll ask,
can you search for papers around physics

143
00:08:15.953 --> 00:08:18.122
and find just two of them for me?

144
00:08:18.122 --> 00:08:22.877
What we're going to do here is make use
of those particular tools that we have.

145
00:08:23.544 --> 00:08:26.547
We're going to see here
using the call tool request

146
00:08:26.797 --> 00:08:30.259
that the MCP client
is sending this data to the server.

147
00:08:30.760 --> 00:08:34.222
The server is invoking that tool
and returning it back to us.

148
00:08:34.597 --> 00:08:37.600
We're then using Claude
with that additional context

149
00:08:37.683 --> 00:08:40.436
to return a nice summary to us.

150
00:08:40.436 --> 00:08:43.940
While we've done a little bit of lower
level programing to make this work,

151
00:08:44.398 --> 00:08:47.944
we've started to build a foundation
for something incredibly powerful.

152
00:08:48.236 --> 00:08:51.239
We're going to first establish
multiple client sessions

153
00:08:51.572 --> 00:08:54.784
to allow
for the use of many different MCP servers.

154
00:08:54.992 --> 00:08:56.786
So these can all start to work together.

155
00:08:56.786 --> 00:08:59.789
And then we're going to start layering
on additional primitives

156
00:08:59.789 --> 00:09:01.499
like resources and prompts.

157
00:09:01.499 --> 00:09:04.502
To really see this work
at a much larger scale.

158
00:09:04.752 --> 00:09:06.420
See you in the next lesson.

159
00:09:06.420 --> 00:09:09.507
And don't forget, if you ever want
to get out of the chatbot, you can

160
00:09:09.507 --> 00:09:10.383
always type quit.


